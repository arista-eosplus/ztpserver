#!/usr/bin/env python
#
# Copyright (c) 2015, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# pylint: disable=W0703,E1103

BACKUP_SUFFIX = '.backup'
PERSISTENT_DIR = '/mnt/flash/.ztp-files'
PERSISTENT_STORAGE = ['/mnt/flash/', '/mnt/usb1/', '/mnt/drive/',
                      '/persist/local/', '/persist/sys/']

import os
import shutil


def is_subdir(path, directory):
    return os.path.realpath(path).startswith(os.path.realpath(directory))


def url_persistent(url):
    for directory in PERSISTENT_STORAGE:
        if is_subdir(url, directory):
            return True
    return False


def main(attributes):
    '''
    Custom action to fetch filenames of the flkv-state folder for a specific switch

    Example:
        ::
          -
            action: get_flkv_files
            always_execute: true
            attributes:
              mode: 777
              src_url: switch1
              dst_url: /mnt/flash/flos/images
            name: "get flkv filenames for switch1"

    '''

    node = attributes.get('NODE')
    src_url = attributes.get('src_url')

    if not src_url:
        raise Exception('Missing attribute(\'src_url\')')

    dst_url = attributes.get('dst_url')
    if not dst_url:
        raise Exception('Missing attribute(\'dst_url\')')

    try:
        tars = '/tmp/flkv_tars'
        flkv_state_path = 'files/flkv-state/' + src_url
        node.retrieve_url(flkv_state_path + '/tars', tars)
        with open(tars, 'r') as openfile:
            filepaths = openfile.readlines()
            for filepath in filepaths:
                filename = os.path.basename(filepath)
                savepath = '{}/{}'.format(dst_url, filename)
                node.retrieve_url(flkv_state_path + filepath, savepath)


    except Exception as exc:
        raise Exception('Unable to retrieve flkv from URL (%s)' %
                        exc)
