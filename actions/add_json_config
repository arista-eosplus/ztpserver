#!/usr/bin/env python
#
# Copyright (c) 2015, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#pylint: disable=W0703,W0402,E1103

import cjson       # pylint: disable=F0401
import re
import os

TEMP_CONFIG = '/tmp/tmp-add-json-config'

def match_neighbors(node, uplinks):
    neighbors = node.neighbors()

    match = False
    for (local_port, remote_device, remote_port) in uplinks:
        # 'Ethernet<number>'
        local_port = 'Ethernet%s' % re.match(
            r'^[Ee][a-z]*([\d\/]+)$', local_port).groups()[0]
        port_neighbors = neighbors.get(local_port, [])
        for neighbor in port_neighbors:
            if(neighbor['device'] == remote_device and
               neighbor['port'] == remote_port):
                match = True
                break
    
    return match

def main(attributes):
    '''Configures device based on JSON input file.

    This action is dual-supervisor compatible.

    Attributes:
        url: path to source JSON config
        
    Special_attributes: 
        NODE: API object - see documentation for details

    Example:
        ::

          -
            action: add_json_config
            attributes:
              url: files/config/config.json
            name: 'configure device via JSON'
            onstart: 'Starting to configure device'
            onsuccess: 'SUCCESS: device configured'
            onfailure: 'FAIL: IM provisioning@example.com for help'
    '''

    node = attributes.get('NODE')

    # Get JSON config
    json_config = attributes.get('json_config')
    if not json_config:
        raise Exception('Missing attribute(\'json_config\')')
    try:
        node.retrieve_url(json_config, TEMP_CONFIG)
    except Exception as exc:
        raise Exception('Unable to retrieve JSON config from URL (%s)' % 
                        exc)
    json = open(TEMP_CONFIG, 'rU')
    json_data = json.read()
    json.close()

    try:
        json_data = json_data.replace("'", '"')
        json_data = cjson.decode(json_data)
    except Exception as exc:        
        raise Exception('Unable to decode JSON config: %s' % 
                        json_data)

    match = True
    for intf_data in json_data:
        if match_neighbors(node, intf_data['uplinks']):
            
            # set_hostname
            if 'hostname' in intf_data:
                node.append_startup_config_lines(
                    '''hostname %s''' % intf_data['hostname'])

            # set Ma1 IP address
            if 'ma1_ip_addr' in intf_data:
                node.append_startup_config_lines(
                    '''interface Management1
ip address %s''' % intf_data['ma1_ip_addr'])                

            # install new image
            if 'image' in intf_data:
                image = intf_data['image']
                try:
                    node.retrieve_url('files/images/%s', 
                                      '%s/%s' % (node.flash(), 
                                                 image))
                except Exception as exc:
                    raise Exception('Unable to retrieve image file '
                                    'from URL (%s)' % exc)
                node.api_enable_cmds(['install source flash:%s' % image])

            # pylint: disable=W0511

            # TODO: add more logic here

            match = True
            break

    if not match:
        raise Exception('Config match not found!')

    # Only remove this in case everything else succeeded
    # for debugging purposes
    os.remove(TEMP_CONFIG)
