#!/usr/bin/env python
#
# Copyright (c) 2015, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# pylint: disable=C0209

from pkg_resources import parse_version
from six import raise_from

BOOT_CONFIG = "/mnt/flash/boot-config"


def remove_eos_release_kind(version):
    if version[-1] in ("M", "F"):
        return version[:-1]
    return version


def main(attributes):
    """Installs new software image.

    If the current software image is the same as the 'version'
    attribute value, then this action is a no-op.  Otherwise, the
    action will replace the existing software image.

    For dual supervisor systems, the image on the active supervisor is
    used as reference.

    This action is dual-supervisor compatible.

    Attributes:
        url: path to source image file
        version: EOS version of new image file
        downgrade: Boolean - Should EOS images be downgraded to match?
                   (Default: True)

    Special_attributes:
        NODE: API object - see documentation for details

    Example:
        ::

            -
              action: install_image
              always_execute: true
              attributes:
                url: files/images/vEOS.swi
                version: 4.13.5F
                downgrade: true
              name: "validate image"
              onstart: "Starting to install image"
              onsuccess: "SUCCESS: 4.13.5F installed"
              onfailure: "FAIL: IM nick@example.com for help"

    """

    node = attributes.get("NODE")
    url = attributes.get("url")

    if not url:
        raise RuntimeError("Missing attribute('url')")

    downgrade = attributes.get("downgrade", True)

    version = attributes.get("version")
    if not version:
        raise RuntimeError("Missing attribute('version')")

    # Return if version matches
    current_version = node.api_enable_cmds(["show version"])[0]["version"]
    if current_version == version:
        node.log_msg("install_image: nothing to do: already running the configured version")
        return

    # Don't downgrade images if flag is set
    if downgrade is not True:
        if parse_version(remove_eos_release_kind(version)) < parse_version(
            remove_eos_release_kind(current_version)
        ):
            node.log_msg("install_image: nothing to do: downgrade disabled")
            return

    # In all other cases, copy the image
    image = "EOS-{}.swi".format(version)
    try:
        node.retrieve_url(url, "{}/{}".format(node.flash(), image))
    except Exception as exc:
        raise_from(RuntimeError("Unable to retrieve image file from URL"), exc)

    node.api_enable_cmds(["install source flash:{}".format(image)])
