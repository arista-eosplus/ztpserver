#!/usr/bin/env python 
#
# Copyright (c) 2014, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#pylint: disable=W0703

BOOT_CONFIG = '/mnt/flash/boot-config'

def main(attributes): 
    '''Installs software image on the switch.

    If the current software image is the same as the 'version'
    attribute value, then this action is a no-op.  Otherwise, the
    action will replace the existing software image.

    For dual supervisor systems, the image on the active supervisor is
    used as reference.

    This action is dual-supervisor compatible.

    Args:
       attributes: list of attributes; use attributes.get(<ATTRIBUTE_NAME>)
                   to read attribute values

       Special attributes:
           node: attributes.get('NODE')
                 API: see documentation
    '''

    node = attributes.get('NODE')
    url = attributes.get('url')

    if not url:
        return 'Missing attribute(\'url\')'

    version = attributes.get('version')
    if not version:
        return 'Missing attribute(\'version\')'
    
    current_version = node.api_enable_cmds(['show version'])[0]['version']
    if current_version == version:
        return

    image = 'EOS-%s.swi' % version
    try:
        node.retrieve_url(url, '%s/%s' % (node.flash(), image))
    except Exception as exc:
        return 'Unable to retrieve image file from URL (%s)' % exc

    node.api_config_cmds(['install source flash:%s' % image])
