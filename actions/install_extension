#!/usr/bin/env python
#
# Copyright (c) 2015, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# pylint: disable=C0209

import ast
import io
import os

from six import raise_from

EXTENSIONS_DIR = "/mnt/flash/.extensions"
BOOT_EXTENSIONS = "/mnt/flash/boot-extensions"


def main(attributes):
    """Installs extension.

    If 'force' is
    set, then the dependency checks are overridden.

    This action is NOT dual-supervisor compatible.

    Attributes:
        url: path to source extension file
        force: ignore validation errors (default: false)
        always_execute: perform copy even if file exists

    Special_attributes:
        NODE: API object - see documentation for details

    Example:
        ::

          -
            action: install_extension
            always_execute: true
            attributes:
              url: files/telemetry-1.0-1.rpm
            name: "Install Telemetry"

    """

    node = attributes.get("NODE")
    url = attributes.get("url")

    if not url:
        raise RuntimeError("Missing attribute('url')")

    force = ast.literal_eval(str(attributes.get("force")))

    if not os.path.exists(EXTENSIONS_DIR):
        os.makedirs(EXTENSIONS_DIR)

    name = url.split("/")[-1]
    try:
        node.retrieve_url(url, "{}/{}".format(EXTENSIONS_DIR, name))
    except Exception as exc:
        raise_from(RuntimeError("Unable to retrieve extension from URL"), exc)

    line = name
    if force:
        line = line + " force"

    lines = []
    if os.access(BOOT_EXTENSIONS, os.R_OK):
        with io.open(BOOT_EXTENSIONS, encoding="utf8") as boot_ext_fd:
            lines = [x.strip() for x in boot_ext_fd.readlines() if x.strip()]

    with io.open(BOOT_EXTENSIONS, "w", encoding="utf8") as boot_ext_fd:
        boot_ext_fd.write("\n".join(lines + [line]))
